public interface IRob {

    void setLEDColor(int led, Color color) throws CommunicationException, IllegalArgumentException;

    void setLEDsMode(LEDsModeEnum mode) throws CommunicationException;

    void moveMT(int angVelR, int angleR, int angVelL, int angleL) throws CommunicationException;

    void moveMT(int angVelR, int angVelL, long time) throws CommunicationException ;

    void movePan(int angVel, int angle) throws CommunicationException;

    void moveTilt(int angVel, int angle) throws CommunicationException;

    void setOperationMode(byte operationMode) throws CommunicationException;

    void resetPanTiltOffset() throws CommunicationException;

    List<MotorStatus> getLastStatusMotors();

    List<IRSensorStatus> getLastStatusIRs();

    List<GapStatus> getLastGapsStatus();

    List<FallStatus> getLastStatusFalls();

    List<BumpStatus> getLastStatusBumps();

    List<ObstacleSensorStatus> getLastStatusObstacles();

    BatteryStatus getLastStatusBattery();

    StopWarningType getLastStopWarning();

    void setRobStatusPeriod(int period) throws CommunicationException;

    void addRobStatusListener(IRobStatusListener listener);

    void addStopWarningListener(IStopWarningListener listener);

    void addRobErrorListener(IRobErrorListener listener);

    void removeStopWarningListener(IStopWarningListener listener);

    void removeRobStatusListener(IRobStatusListener listener);

    void removeRobErrorListener(IRobErrorListener listener);

    void configureInfrared(byte infraredId, byte commandCode, byte dataByteLow, byte dataByteHigh) throws CommunicationException;

    void maxValueMotors(int m1Tension, int m1Time,
                    int m2Tension, int m2Time, int panTension, int panTime,
                    int tiltTension, int tiltTime) throws CommunicationException;

    void resetRob() throws CommunicationException;


    void resetWheelEncoders(RobMotorEnum motor) throws CommunicationException;

}
public interface IRobMovementModule extends IModule {


    public void moveForwardsTime(int velocity, long time) throws InternalErrorException;

    public void moveForwardsAngle(int velocity, int angle) throws InternalErrorException;

    public void moveBackwardsTime(int velocity, long time) throws InternalErrorException;

    public void moveBackwardsAngle(int velocity, int angle) throws InternalErrorException;

    public void stop() throws InternalErrorException;

    public void turnLeftTime(int velocity, long time) throws InternalErrorException;

    public void turnLeftAngle(int velocity, int angle) throws InternalErrorException;

    public void turnRightTime(int velocity, long time) throws InternalErrorException;

    public void turnRightAngle(int velocity, int angle) throws InternalErrorException;

    public void turnLeftBackwardsTime(int velocity, long time) throws InternalErrorException;

    public void turnRightBackwardsTime(int velocity, long time) throws InternalErrorException;

    public void movePan(int velocity, int angle) throws InternalErrorException;

    public void moveTilt(int velocity, int angle) throws InternalErrorException;

    public void movePanTilt(int velocitypan, int anglepan ,int velocitytilt, int angletilt) throws InternalErrorException;

}
public interface ICameraModule extends IModule {

    public void suscribe(ICameraListener listener);

    public void unsuscribe(ICameraListener listener);

    public void signalInit();

    public void passOCVthings(CameraBridgeViewBase bridgebase);

    public void changeCamera();
}

    public void addProcessor(AudioProcessor processor);



